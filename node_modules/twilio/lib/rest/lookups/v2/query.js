"use strict";
/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Lookups
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryInstance = exports.QueryListInstance = exports.SmsPumpingRiskParameters = exports.SmsPumpingRisk = exports.SimSwap = exports.ReassignedNumberResponse = exports.ReassignedNumberRequest = exports.LookupResponseWithCorId = exports.LookupRequestWithCorId = exports.LookupRequest1 = exports.LineTypeIntelligence = exports.LineStatus = exports.LastSimSwap = exports.IdentityMatchParameters = exports.IdentityMatch = exports.CallerName = exports.CallForwarding = void 0;
const util_1 = require("util");
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
class CallForwarding {
}
exports.CallForwarding = CallForwarding;
class CallerName {
}
exports.CallerName = CallerName;
class IdentityMatch {
}
exports.IdentityMatch = IdentityMatch;
class IdentityMatchParameters {
}
exports.IdentityMatchParameters = IdentityMatchParameters;
class LastSimSwap {
}
exports.LastSimSwap = LastSimSwap;
class LineStatus {
}
exports.LineStatus = LineStatus;
class LineTypeIntelligence {
}
exports.LineTypeIntelligence = LineTypeIntelligence;
class LookupRequest1 {
}
exports.LookupRequest1 = LookupRequest1;
class LookupRequestWithCorId {
}
exports.LookupRequestWithCorId = LookupRequestWithCorId;
class LookupResponseWithCorId {
}
exports.LookupResponseWithCorId = LookupResponseWithCorId;
class ReassignedNumberRequest {
}
exports.ReassignedNumberRequest = ReassignedNumberRequest;
class ReassignedNumberResponse {
}
exports.ReassignedNumberResponse = ReassignedNumberResponse;
class SimSwap {
}
exports.SimSwap = SimSwap;
class SmsPumpingRisk {
}
exports.SmsPumpingRisk = SmsPumpingRisk;
class SmsPumpingRiskParameters {
}
exports.SmsPumpingRiskParameters = SmsPumpingRiskParameters;
function QueryListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/batch/query`;
    instance.create = function create(params, headers, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        }
        else {
            params = params || {};
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers,
        });
        operationPromise = operationPromise.then((payload) => new QueryInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
exports.QueryListInstance = QueryListInstance;
class QueryInstance {
    constructor(_version, payload) {
        this._version = _version;
        this.phoneNumbers = payload.phone_numbers;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */
    toJSON() {
        return {
            phoneNumbers: this.phoneNumbers,
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.QueryInstance = QueryInstance;
